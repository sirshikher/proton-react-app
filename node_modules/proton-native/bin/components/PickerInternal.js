"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _propChecker = _interopRequireDefault(require("../utils/propChecker"));

var _devtools = require("../devtools");

var _Container = require("./Container");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _propsUpdater = _interopRequireDefault(require("../utils/propsUpdater"));

var _convertStyleSheet = _interopRequireDefault(require("../utils/convertStyleSheet"));

var _YogaComponent = require("./YogaComponent");

var _qt = require("../backends/qt");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = function _default(p) {
  var propTypes = {
    style: _propTypes["default"].object,
    onValueChange: _propTypes["default"].func,
    selectedValue: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number])
  };
  var defaultProps = {
    style: {},
    onValueChange: function onValueChange() {},
    selectedValue: ''
  };
  var element = new _qt.PickerElement();
  var items = {};
  var itemList = [];

  var props = _objectSpread({}, p);

  props = (0, _propChecker["default"])(props, propTypes, defaultProps, 'Picker');
  var yogaProps = (0, _YogaComponent.YogaComponent)(element, undefined, true);
  var handlers = {
    onValueChange: props.onValueChange
  };
  element.activatedEvent(function (text) {
    handlers.onValueChange(items[text] || text, element.currentIndex());
  });
  var containerProps = (0, _Container.Container)(function (child) {
    if (!child.props) return;
    element.addItem(child.props.label);
    itemList.push(child.props.label);
    items[child.props.label] = child.props.value || child.props.label;
  }, function (child) {
    if (!child.props) return;
    element.removeItem(itemList.indexOf(child.props.label));
    delete items[child.props.label];
    itemList.splice(itemList.indexOf(child.props.label), 1);
  }, function (child, i) {
    if (!child.props) return;
    element.insertItem(i, child.props.label);
    items[child.props.label] = child.props.value || child.props.label;
    itemList.splice(i, 0, child.props.label);
  });
  var updateProps = (0, _propsUpdater["default"])([handlers, 'onValueChange'], {
    style: function style(_style) {
      element.setStyleSheet((0, _convertStyleSheet["default"])(_style));
      yogaProps.applyYogaStyle(_style);
    },
    selectedValue: function selectedValue(value) {
      element.setCurrentText(value);
    },
    children: function children(_children) {
      if (_children.map(function (x) {
        return x.props ? x.props.label : x;
      }).toString() == itemList.toString()) return;

      for (var i = itemList.length - 1; i >= 0; i--) {
        itemList.splice(i, 1);
        element.removeItem(i);
      }

      Object.keys(items).forEach(function (item) {
        return delete items[item];
      });

      for (var _i = 0; _i < _children.length; _i++) {
        containerProps.appendChild(_children[_i]);
      }

      if (!_children.length) {
        containerProps.appendChild(_children);
      }
    }
  });
  updateProps(props);
  return _objectSpread({}, containerProps, {}, yogaProps, {
    element: element,
    updateProps: updateProps
  });
};

exports["default"] = _default;