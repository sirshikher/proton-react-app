"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _propChecker = _interopRequireDefault(require("../utils/propChecker"));

var _devtools = require("../devtools");

var _propsUpdater = _interopRequireDefault(require("../utils/propsUpdater"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = function _default(p) {
  var children = [];
  var propTypes = {};
  var defaultProps = {};

  var props = _objectSpread({}, p);

  props = (0, _propChecker["default"])(props, propTypes, defaultProps, 'App');
  var updateProps = (0, _propsUpdater["default"])({});

  var appendChild = function appendChild(child) {
    if (child.element) {
      children.push(child);
      child.element.show();
    }
  };

  var insertChild = function insertChild(child, beforeChild) {
    if (children.includes(child)) {
      throw new Error("Can't add the same window twice");
    }

    if (!children.includes(beforeChild)) {
      throw new Error("Relative element does not exist");
    }

    var i = children.indexOf(beforeChild);
    children.splice(0, i, child);
    child.element.show();
  };

  var removeChild = function removeChild(child) {
    if (!children.includes(child)) {
      throw new Error("Can't remove a child that's not added");
    }

    var i = children.indexOf(child);
    children.splice(i, 1)[0].element.del();
  };

  updateProps(props);
  return {
    appendChild: appendChild,
    insertChild: insertChild,
    removeChild: removeChild,
    updateProps: updateProps,
    children: children
  };
};

exports["default"] = _default;