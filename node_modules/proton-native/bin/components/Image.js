"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _propChecker = _interopRequireDefault(require("../utils/propChecker"));

var _devtools = require("../devtools");

var _Container = require("./Container");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _propsUpdater = _interopRequireDefault(require("../utils/propsUpdater"));

var _convertStyleSheet = _interopRequireDefault(require("../utils/convertStyleSheet"));

var _YogaComponent = require("./YogaComponent");

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _qt = require("../backends/qt");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = function _default(p) {
  var propTypes = {
    style: _propTypes["default"].object,
    onResponderGrant: _propTypes["default"].func,
    onResponderRelease: _propTypes["default"].func,
    resizeMode: _propTypes["default"].oneOf(['cover', 'contain', 'stretch', 'repeat', 'center']),
    source: _propTypes["default"].object
  };
  var defaultProps = {
    style: {},
    onResponderGrant: function onResponderGrant() {},
    onResponderRelease: function onResponderRelease() {}
  };
  var element = new _qt.ImageElement();

  var props = _objectSpread({}, p);

  props = (0, _propChecker["default"])(props, propTypes, defaultProps, 'Image');
  var _resizeMode = {
    r: props.resizeMode || 'stretch'
  };
  var pixSize = {};
  var yogaProps = (0, _YogaComponent.YogaComponent)(element, function (layout) {
    pixSize.width = layout.width;
    pixSize.height = layout.height;
    pixSize.resizeMode = _resizeMode.r;
    if (!element.isNull()) element.scaleImage(layout.width, layout.height, _resizeMode.r);
  });
  var handlers = {
    onResponderGrant: props.onResponderGrant,
    onResponderRelease: props.onResponderRelease
  };
  element.mousePressEvent(function () {
    handlers.onResponderGrant();
  });
  element.mouseReleaseEvent(function () {
    handlers.onResponderRelease();
  });
  var containerProps = (0, _Container.Container)(function (child) {
    child.element.setParent(element);

    if (child.node) {
      yogaProps.node.insertChild(child.node, yogaProps.node.getChildCount());
    }
  }, function (child) {
    child.element.del();

    if (child.node) {
      yogaProps.node.removeChild(child.node);
    }
  }, function (child, i) {
    child.element.setParent(element);

    if (child.node) {
      yogaProps.node.insertChild(child.node, i);
    }
  });
  var updateProps = (0, _propsUpdater["default"])([handlers, 'onResponderGrant', 'onResponderRelease'], {
    style: function style(_style) {
      if (_style.resizeMode) {
        _resizeMode.r = _style.resizeMode;
      }

      element.setStyleSheet((0, _convertStyleSheet["default"])(_style));
      yogaProps.applyYogaStyle(_style);
    },
    resizeMode: function resizeMode(r) {
      _resizeMode.r = r;
    },
    source: function source(_source) {
      if (_source.uri) {
        // need to figure out what width and height work with, and also work with arrays
        if (_source.uri.startsWith('http://') || _source.uri.startsWith('https://') || _source.uri.startsWith('ftp://')) {
          (0, _nodeFetch["default"])(_source.uri, {
            method: _source.method || 'GET',
            body: _source.body,
            headers: _source.headers
          }).then(function (out) {
            return out.buffer();
          }).then(function (out) {
            element.setFromData(out);
            element.scaleImage(pixSize.width, pixSize.height, pixSize.resizeMode);
          })["catch"](function (err) {
            return console.log(err);
          });
        } else {
          element.setFromUri(_source.uri);
          element.scaleImage(pixSize.width, pixSize.height, pixSize.resizeMode);
        }
      }
    }
  });
  updateProps(props);
  return _objectSpread({}, containerProps, {}, yogaProps, {
    element: element,
    updateProps: updateProps,
    resizeMode: _resizeMode
  });
};

exports["default"] = _default;