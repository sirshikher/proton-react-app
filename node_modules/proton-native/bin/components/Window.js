"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _propChecker = _interopRequireDefault(require("../utils/propChecker"));

var _devtools = require("../devtools");

var _Container = require("./Container");

var _propsUpdater = _interopRequireDefault(require("../utils/propsUpdater"));

var _render = require("../render");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _convertStyleSheet = _interopRequireDefault(require("../utils/convertStyleSheet"));

var _YogaComponent = require("./YogaComponent");

var _qt = require("../backends/qt");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = function _default(p) {
  var propTypes = {
    style: _propTypes["default"].object,
    onResize: _propTypes["default"].func
  };
  var defaultProps = {
    style: {},
    onResize: function onResize() {}
  };
  var element = new _qt.WindowElement();

  var props = _objectSpread({}, p);

  props = (0, _propChecker["default"])(props, propTypes, defaultProps, 'Window');
  var yogaProps = (0, _YogaComponent.YogaComponent)(element);
  var handlers = {
    onResize: props.onResize
  };
  element.resizeEvent(function (w, h) {
    _render.ROOT_NODE.afterCommit(_render.ROOT_NODE);

    handlers.onResize({
      w: w,
      h: h
    });
  });

  var percentToSize = function percentToSize(width, height) {
    var newWidth = width;
    var newHeight = height;

    if (typeof width == 'string' && width[width.length - 1] == '%') {
      newWidth = (0, _qt.desktopSize)().w * (parseInt(width, 10) / 100.0);
    }

    if (typeof height == 'string' && height[height.length - 1] == '%') {
      newHeight = (0, _qt.desktopSize)().h * (parseInt(height, 10) / 100.0);
    }

    return {
      w: newWidth,
      h: newHeight
    };
  };

  var updateProps = (0, _propsUpdater["default"])([handlers, 'onResize'], {
    style: function style(_style) {
      var width = _style.width;
      var height = _style.height;
      delete _style.width; // cause we don't want to resize with yoga, only with our pipeline

      delete _style.height;
      element.setStyleSheet((0, _convertStyleSheet["default"])(_style));
      yogaProps.applyYogaStyle(_style);
      var size = percentToSize(width, height);

      if (size.h && size.w) {
        element.resize(size.w, size.h);
      } else if (size.w) {
        element.resize(size.w, element.height());
      } else if (size.h) {
        element.resize(element.width(), size.h);
      }
    }
  });
  var containerProps = (0, _Container.Container)(function (child) {
    child.element.setParent(element);

    if (child.node) {
      yogaProps.node.insertChild(child.node, yogaProps.node.getChildCount());
    }
  }, function (child) {
    child.element.del();

    if (child.node) {
      yogaProps.node.removeChild(child.node);
    }
  }, function (child, i) {
    child.element.setParent(element);

    if (child.node) {
      yogaProps.node.insertChild(child.node, i);
    }
  });
  updateProps(props);
  return _objectSpread({}, containerProps, {}, yogaProps, {
    element: element,
    updateProps: updateProps
  });
};

exports["default"] = _default;