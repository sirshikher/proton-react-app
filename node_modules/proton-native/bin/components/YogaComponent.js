"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YogaComponent = void 0;

var _yogaLayoutPrebuilt = _interopRequireWildcard(require("yoga-layout-prebuilt"));

var _yogaHelper = require("../utils/yogaHelper");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var YogaComponent = function YogaComponent(element, postApplyYoga, standardMeasure) {
  var config = _yogaLayoutPrebuilt["default"].Config.create(); //config.setPrintTreeFlag(true);


  var node = _yogaLayoutPrebuilt.Node.createWithConfig(config);

  var f = {};
  var oldLayout = {};

  var applyYogaStyle = function applyYogaStyle(style) {
    for (var key in style) {
      var transformer = (0, _yogaHelper.getYogaValueTransformer)(key);
      var setFn = node[transformer.functionName];

      if (setFn) {
        var value = style[key];
        var args = transformer.transform(value);
        setFn.apply(node, args);
      }
    }
  };

  var applyYoga = function applyYoga(root, func) {
    f.f = func;

    if (root) {
      node.calculateLayout(root.w, root.h);
    }

    var layout = node.getComputedLayout();
    var simpleLayout = {
      width: layout.width,
      height: layout.height,
      left: layout.left,
      top: layout.top
    };
    var shouldUpdate = false;

    for (var prop in simpleLayout) {
      if (simpleLayout[prop] !== oldLayout[prop]) {
        shouldUpdate = true;
      }
    }

    if (!shouldUpdate) return;
    element.resize(layout.width, layout.height);
    element.move(layout.left, layout.top);

    if (postApplyYoga) {
      postApplyYoga(layout);
    }

    Object.assign(oldLayout, simpleLayout);
  };

  if (standardMeasure) {
    var measure = function measure(width, widthMode, height, heightMode) {
      return {
        height: element.minSize().h,
        width: element.minSize().w
      };
    };

    node.setMeasureFunc(function () {
      return measure.apply(void 0, arguments);
    });
  }

  return {
    applyYogaStyle: applyYogaStyle,
    applyYoga: applyYoga,
    node: node,
    f: f
  };
};

exports.YogaComponent = YogaComponent;