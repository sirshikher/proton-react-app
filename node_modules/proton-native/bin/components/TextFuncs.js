"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextFuncs = void 0;

var _convertStyleSheet = _interopRequireDefault(require("../utils/convertStyleSheet"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var TextFuncs = function TextFuncs(upText, styleProp) {
  var children = [];
  var text = [''];

  var updateText = function updateText() {
    var childText = [];

    for (var i = 0; i < children.length; i++) {
      childText.push(children[i].text);
    }

    text[0] = "<span style=\"".concat((0, _convertStyleSheet["default"])(styleProp), "\">").concat(childText.join(''), "</span>");
    upText(text[0]);
  };

  var appendChild = function appendChild(child) {
    if (child.type != 'text' && child.type !== 'fullText') {
      throw new Error("Can't add a child to Text that isn't a string or Text");
    }

    children.push(child);
    updateText();
  };

  var insertChild = function insertChild(child, beforeChild) {
    if (child.type !== 'text' && child.type !== 'fullText') {
      throw new Error("Can't add a child to Text that isn't a string or Text");
    }

    if (!children.includes(beforeChild)) {
      throw new Error("Relative element does not exist");
    }

    var i = children.indexOf(beforeChild);
    children.splice(i, 0, child);
    updateText();
  };

  var removeChild = function removeChild(child) {
    if (!children.includes(child)) {
      throw new Error("Can't remove a child that's not added");
    }

    var i = children.indexOf(child);
    children.splice(i, 1);
    updateText();
  };

  return {
    appendChild: appendChild,
    insertChild: insertChild,
    removeChild: removeChild,
    children: children,
    updateText: updateText,
    text: text
  };
};

exports.TextFuncs = TextFuncs;