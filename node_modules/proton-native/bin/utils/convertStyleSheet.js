"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var excluded = ['display', 'top', 'right', 'bottom', 'left', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'position', 'overflow', 'alignItems', 'justifyContent', 'flexDirection', 'flexWrap', 'alignContent', 'alignSelf', 'aspectRatio', 'flex', 'flexBasis', 'flexGrow', 'flexShrink', 'height', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'width'];
var convertToPx = ['fontSize'];

var convertStyleSheet = function convertStyleSheet(style) {
  return Object.entries(style).reduce(function (styleString, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        propName = _ref2[0],
        propValue = _ref2[1];

    if (excluded.includes(propName)) {
      return styleString;
    }

    if (convertToPx.includes(propName)) {
      if (typeof propValue == 'number') {
        propValue = "".concat(propValue, "px");
      }
    }

    propName = propName.replace(/([A-Z])/g, function (matches) {
      return "-".concat(matches[0].toLowerCase());
    });
    return "".concat(styleString).concat(propName, ":").concat(propValue, ";");
  }, '');
};

var _default = convertStyleSheet;
exports["default"] = _default;