"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getYogaValueTransformer = getYogaValueTransformer;
exports.getYogaNodeSetFunctionName = getYogaNodeSetFunctionName;

var _yogaLayoutPrebuilt = _interopRequireDefault(require("yoga-layout-prebuilt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var mixedYogaValueTransformers = {
  display: function display(value) {
    switch (value) {
      case 'flex':
        return _yogaLayoutPrebuilt["default"].DISPLAY_FLEX;

      case 'none':
        return _yogaLayoutPrebuilt["default"].DISPLAY_NONE;
    }
  },
  top: {
    functionName: 'setPosition',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_TOP, value];
    }
  },
  right: {
    functionName: 'setPosition',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_RIGHT, value];
    }
  },
  bottom: {
    functionName: 'setPosition',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_BOTTOM, value];
    }
  },
  left: {
    functionName: 'setPosition',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_LEFT, value];
    }
  },
  border: {
    functionName: '',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_ALL, value];
    }
  },
  borderTop: {
    functionName: '',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_TOP, value];
    }
  },
  borderRight: {
    functionName: '',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_RIGHT, value];
    }
  },
  borderBottom: {
    functionName: '',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_BOTTOM, value];
    }
  },
  borderLeft: {
    functionName: '',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_LEFT, value];
    }
  },
  margin: {
    functionName: 'setMargin',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_ALL, value];
    }
  },
  marginTop: {
    functionName: 'setMargin',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_TOP, value];
    }
  },
  marginRight: {
    functionName: 'setMargin',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_RIGHT, value];
    }
  },
  marginBottom: {
    functionName: 'setMargin',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_BOTTOM, value];
    }
  },
  marginLeft: {
    functionName: 'setMargin',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_LEFT, value];
    }
  },
  padding: {
    functionName: 'setPadding',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_ALL, value];
    }
  },
  paddingTop: {
    functionName: 'setPadding',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_TOP, value];
    }
  },
  paddingRight: {
    functionName: 'setPadding',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_RIGHT, value];
    }
  },
  paddingBottom: {
    functionName: 'setPadding',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_BOTTOM, value];
    }
  },
  paddingLeft: {
    functionName: 'setPadding',
    transform: function transform(value) {
      return [_yogaLayoutPrebuilt["default"].EDGE_LEFT, value];
    }
  },
  position: {
    functionName: 'setPositionType',
    transform: function transform(value) {
      switch (value) {
        case 'relative':
          return [_yogaLayoutPrebuilt["default"].POSITION_TYPE_RELATIVE];

        case 'absolute':
          return [_yogaLayoutPrebuilt["default"].POSITION_TYPE_ABSOLUTE];
      }

      throw new Error('Position not supported: ' + value);
    }
  },
  overflow: function overflow(value) {
    switch (value) {
      case 'visible':
        return _yogaLayoutPrebuilt["default"].OVERFLOW_VISIBLE;

      case 'hidden':
        return _yogaLayoutPrebuilt["default"].OVERFLOW_HIDDEN;

      case 'scroll':
        return _yogaLayoutPrebuilt["default"].OVERFLOW_SCROLL;
    }
  },
  alignItems: function alignItems(value) {
    switch (value) {
      case 'auto':
        return _yogaLayoutPrebuilt["default"].ALIGN_AUTO;

      case 'flex-start':
        return _yogaLayoutPrebuilt["default"].ALIGN_FLEX_START;

      case 'center':
        return _yogaLayoutPrebuilt["default"].ALIGN_CENTER;

      case 'flex-end':
        return _yogaLayoutPrebuilt["default"].ALIGN_FLEX_END;

      case 'stretch':
        return _yogaLayoutPrebuilt["default"].ALIGN_STRETCH;

      case 'baseline':
        return _yogaLayoutPrebuilt["default"].ALIGN_BASELINE;

      case 'space-between':
        return _yogaLayoutPrebuilt["default"].ALIGN_SPACE_BETWEEN;

      case 'space-around':
        return _yogaLayoutPrebuilt["default"].ALIGN_SPACE_AROUND;
    }
  },
  alignSelf: function alignSelf(value) {
    switch (value) {
      case 'auto':
        return _yogaLayoutPrebuilt["default"].ALIGN_AUTO;

      case 'flex-start':
        return _yogaLayoutPrebuilt["default"].ALIGN_FLEX_START;

      case 'center':
        return _yogaLayoutPrebuilt["default"].ALIGN_CENTER;

      case 'flex-end':
        return _yogaLayoutPrebuilt["default"].ALIGN_FLEX_END;

      case 'stretch':
        return _yogaLayoutPrebuilt["default"].ALIGN_STRETCH;

      case 'baseline':
        return _yogaLayoutPrebuilt["default"].ALIGN_BASELINE;

      case 'space-between':
        return _yogaLayoutPrebuilt["default"].ALIGN_SPACE_BETWEEN;

      case 'space-around':
        return _yogaLayoutPrebuilt["default"].ALIGN_SPACE_AROUND;
    }
  },
  alignContent: function alignContent(value) {
    switch (value) {
      case 'auto':
        return _yogaLayoutPrebuilt["default"].ALIGN_AUTO;

      case 'flex-start':
        return _yogaLayoutPrebuilt["default"].ALIGN_FLEX_START;

      case 'center':
        return _yogaLayoutPrebuilt["default"].ALIGN_CENTER;

      case 'flex-end':
        return _yogaLayoutPrebuilt["default"].ALIGN_FLEX_END;

      case 'stretch':
        return _yogaLayoutPrebuilt["default"].ALIGN_STRETCH;

      case 'baseline':
        return _yogaLayoutPrebuilt["default"].ALIGN_BASELINE;

      case 'space-between':
        return _yogaLayoutPrebuilt["default"].ALIGN_SPACE_BETWEEN;

      case 'space-around':
        return _yogaLayoutPrebuilt["default"].ALIGN_SPACE_AROUND;
    }
  },
  justifyContent: function justifyContent(value) {
    switch (value) {
      case 'flex-start':
        return _yogaLayoutPrebuilt["default"].JUSTIFY_FLEX_START;

      case 'center':
        return _yogaLayoutPrebuilt["default"].JUSTIFY_CENTER;

      case 'flex-end':
        return _yogaLayoutPrebuilt["default"].JUSTIFY_FLEX_END;

      case 'space-between':
        return _yogaLayoutPrebuilt["default"].JUSTIFY_SPACE_BETWEEN;

      case 'space-around':
        return _yogaLayoutPrebuilt["default"].JUSTIFY_SPACE_AROUND;

      case 'space-evenly':
        return _yogaLayoutPrebuilt["default"].JUSTIFY_SPACE_EVENLY;
    }
  },
  flexDirection: function flexDirection(value) {
    switch (value) {
      case 'column':
        return _yogaLayoutPrebuilt["default"].FLEX_DIRECTION_COLUMN;

      case 'row':
        return _yogaLayoutPrebuilt["default"].FLEX_DIRECTION_ROW;
    }
  },
  flexWrap: function flexWrap(value) {
    switch (value) {
      case 'wrap':
        return _yogaLayoutPrebuilt["default"].WRAP_WRAP;

      case 'nowrap':
        return _yogaLayoutPrebuilt["default"].WRAP_NO_WRAP;

      case 'wrap-reverse':
        return _yogaLayoutPrebuilt["default"].WRAP_REVERSE;
    }
  }
};

function getYogaValueTransformer(propertyName) {
  var transformer = mixedYogaValueTransformers[propertyName];

  if (!transformer) {
    return {
      transform: function transform(value) {
        return [value];
      },
      functionName: getYogaNodeSetFunctionName(propertyName)
    };
  }

  if (typeof transformer === 'function') {
    return {
      transform: function transform(value) {
        return [transformer(value)];
      },
      functionName: getYogaNodeSetFunctionName(propertyName)
    };
  }

  return transformer;
}

function getYogaNodeSetFunctionName(propertyName) {
  return 'set' + propertyName[0].toUpperCase() + propertyName.substr(1);
}