"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var propsUpdater = function propsUpdater() {
  for (var _len = arguments.length, updateMaps = new Array(_len), _key = 0; _key < _len; _key++) {
    updateMaps[_key] = arguments[_key];
  }

  return function (changes) {
    return updateMaps.forEach(function (updateMap) {
      /** updateMap can be any of:
       * A) { [prop]: (newValue) => void }
       * B) [ mutableObject, ...prop | { [prop]: [string objectKey] }]
       **/
      if (!Array.isArray(updateMap)) {
        // A
        return Object.entries(updateMap).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              prop = _ref2[0],
              updateFn = _ref2[1];

          if (prop in changes) {
            updateFn(changes[prop]);
          }
        });
      } // B


      var mutableObject = updateMap[0];
      updateMap.slice(1).forEach(function (p) {
        if (_typeof(p) === 'object') {
          Object.entries(p).forEach(function (_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2),
                prop = _ref4[0],
                objectKey = _ref4[1];

            if (prop in changes) {
              mutableObject[objectKey] = changes[prop];
            }
          });
        } else {
          if (p in changes) {
            mutableObject[p] = changes[p];
          }
        }
      });
    });
  };
};

var _default = propsUpdater;
exports["default"] = _default;